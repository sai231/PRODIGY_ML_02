import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# load customer data
data = pd.read_csv('customer_data.csv')

# define the features we want to use for clustering
features = ['annual_income', 'spending_score']

# create a new dataframe with just these features
df = pd.DataFrame(data, columns=features)

# scale the features for better clustering performance
scaler = StandardScaler()
scaled_df = scaler.fit_transform(df)

# initialize an empty list to store the number of clusters for each silhouette score
silhouette_scores = []

# create a range of number of clusters from 2 to the number of customers
for k in range(2, len(data)):
    # apply the K-means algorithm to the scaled data
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_df)

    # compute the silhouette score for the current clustering
    score = silhouette_score(scaled_df, kmeans.labels_)
    silhouette_scores.append(score)

# determine the number of clusters with the best silhouette score
best_k = silhouette_scores.index(max(silhouette_scores)) + 2

# apply the K-means algorithm to the scaled data using the best number of clusters
kmeans = KMeans(n_clusters=best_k, random_state=42)
kmeans.fit(scaled_df)

# assign each customer to a cluster
data['cluster'] = kmeans.labels_

# save the updated data to a new csv file
data.to_csv('customer_clusters.csv', index=False)
